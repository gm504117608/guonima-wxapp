<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
       default-autowire="byName">

    <!-- 启用注解 -->
    <context:annotation-config/>

    <!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
    <!-- 配置要扫描的包 ,有多个可以用';'号隔开,也可写多个context:component-scan -->
    <context:component-scan base-package="com.guonima.wxapp">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/mybatis/db/dbconfig.properties</value>
            </list>
        </property>
    </bean>

    <!-- DBCP -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>

        <property name="maxIdle" value="${db.maxIdle}"/>
        <property name="maxActive" value="${db.maxActive}"/>
        <property name="defaultAutoCommit" value="false"/>
        <property name="timeBetweenEvictionRunsMillis" value="3600000"/>
        <property name="minEvictableIdleTimeMillis" value="3600000"/>
    </bean>


    <!-- TransactionManager定义。 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="daoSupport" class="com.guonima.wxapp.dao.DaoSupport"></bean>

    <!-- MyBatis sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/*/*.xml"></property>
    </bean>

    <!-- MyBatis sqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!-- 事物管理方式一：基于xml配置方式 -->
    <!-- propagation:事物传播行为
             1、REQUIRED（默认值）：在有transaction状态下执行；如当前没有transaction，则创建新的transaction
             2、SUPPORTS：如当前有transaction，则在transaction状态下执行；如果当前没有transaction，在无transaction状态下执行
             3、MANDATORY：必须在有transaction状态下执行，如果当前没有transaction，则抛出异常IllegalTransactionStateException
             4、REQUIRES_NEW：创建新的transaction并执行；如果当前已有transaction，则将当前transaction挂起
             5、NOT_SUPPORTED：在无transaction状态下执行；如果当前已有transaction，则将当前transaction挂起
             6、NEVER：在无transaction状态下执行；如果当前已有transaction，则抛出异常IllegalTransactionStateException
             7、NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作
         read-only:读写或只读事务，默认false(读写)
         isolation:可选的事务隔离级别设置
             1、DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.另外四个与JDBC的隔离级别相对应
             2、READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据
             3、READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据
             4、REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读
             5、SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读
         rollback-for:导致事务回滚的异常类数组,Class对象数组，必须继承自Throwable,一般我们都继承RuntimeException
         timeout:事务超时时间设置 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="add*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="create*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="modify*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="put*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="remove*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="cancel*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="deal*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="handle*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="log" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <!-- quartz job 方法也需要在事物中执行 -->
            <tx:method name="pause*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="resume*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="execute*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <tx:method name="interrupt*" propagation="REQUIRED" read-only="false"
                       rollback-for="com.guonima.wxapp.exception.ServiceException" />
            <!--<tx:method name="*" read-only="true"/>-->
            <tx:method name="get*" read-only="true"  />
            <tx:method name="find*" read-only="true" />
            <tx:method name="load*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="select*" read-only="true" />
        </tx:attributes>
    </tx:advice>


    <aop:config expose-proxy="true" proxy-target-class="true">
        <aop:pointcut id="transactionPointcut"
                      expression="execution(* com.guonima.wxapp.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut" order="0"/>
    </aop:config>

</beans>